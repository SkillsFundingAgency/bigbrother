<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="$(ProjectDir)\bin\Debug\BigBrother.Core.dll" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="BigBrother.Core" #>
<#@ output extension=".cs" #>
<#
	/***********************************************************/
	// This is the relative output directory for this project.
	// TODO: Get rid of this and make it smarter.
	/***********************************************************/

    const string relativeOutDir = @"\bin\Debug";

    var path = Path.Combine(Path.GetDirectoryName(Host.TemplateFile) + relativeOutDir, "Common.Telemetry.Events.dll");

    var assembly = Assembly.LoadFrom(path);
    var events = assembly.GetTypes().Where(t => typeof (BBEvent).IsAssignableFrom(t) && !t.IsAbstract);

	var i = 1;
#>
namespace <#= Host.ResolveParameterValue("Etw", "Etw", "projectDefaultNamespace")  #>
{
	using System;
    using Microsoft.Diagnostics.Tracing;

    sealed partial class EtwInternalSource : EventSource
    {
<#  foreach (var bbEvent in events)
	{
	    var validProperties = bbEvent.GetProperties()
	                                 .Where(p => (p.PropertyType.IsValueType ||
	                                              p.PropertyType == typeof (Guid) ||
	                                              p.PropertyType == typeof (string)) &&
	                                             (p.PropertyType.Namespace != null && !p.PropertyType.Namespace.Contains("BigBrother.Core")))
	                                 .ToList();
#>
		public void MessageMethod(<#foreach (var property in validProperties) { #><#= property.PropertyType.Name #> <#= CamelCase(property.Name) #><# if(property != validProperties.Last()) { #>, <# } #><# } #>)
		{
			if (IsEnabled())
				WriteEvent(<#= i++ #>, <#foreach (var property in validProperties) { #><#= CamelCase(property.Name) #><# if(property != validProperties.Last()) { #>, <# } #><# } #>);
		}

<#
    }
#>
    }
}

<#+
    private string CamelCase(string input)
    {
        return input[0].ToString().ToLower() + input.Substring(1);
    }
#>