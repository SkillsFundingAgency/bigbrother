<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ include file="MultipleOutputHelper.ttinclude" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="Microsoft.CSharp" #>
<#@ assembly name="$(ProjectDir)\bin\Debug\BigBrother.Core.dll" #>
<#@ assembly name="$(ProjectDir)\bin\Debug\$(TargetFileName)" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="BigBrother.Core" #>
<#@ output extension=".cs" #><#
	var manager = Manager.Create(Host, GenerationEnvironment);

    var events = AppDomain.CurrentDomain.GetAssemblies()
                          .SelectMany(a => a.GetTypes())
                          .Where(
                              t =>
                                  typeof (BBEvent).IsAssignableFrom(t) &&
                                  !t.IsAbstract &&
								  t.Namespace != "BigBrother.Core" &&
                                  t.GetCustomAttributes().Select(a => a.GetType()).Contains(typeof (EtwEventAttribute))).ToList();

    var exceptionEvents = AppDomain.CurrentDomain.GetAssemblies()
                                   .SelectMany(a => a.GetTypes())
                                   .Where(
                                       t =>
                                           typeof (BBExceptionEvent).IsAssignableFrom(t) &&
                                           !t.IsAbstract &&
                                           t.Namespace != "BigBrother.Core")
                                   .ToList();

    exceptionEvents.Add(typeof (BBExceptionEvent));

	var i = 1;
    manager.StartNewFile("EtwInternalSource.Generated.cs");
#>
namespace <#=Host.ResolveParameterValue("Etw", "Etw", "projectDefaultNamespace")#>
{
	using System;
    using Microsoft.Diagnostics.Tracing;

    [EventSource(Name = "<#=Host.ResolveParameterValue("Etw", "Etw", "projectDefaultNamespace")#>")]
    public sealed partial class EtwInternalSource : EventSource
    {
        private static readonly Lazy<EtwInternalSource> lazy = new Lazy<EtwInternalSource>(() => new EtwInternalSource());

        public static EtwInternalSource Instance { get { return lazy.Value; } }

<#  foreach (var bbEvent in events)
	{
	    var validProperties = bbEvent.GetProperties()
	                                 .Where(p => (p.PropertyType.IsValueType ||
	                                              p.PropertyType == typeof (Guid) ||
	                                              p.PropertyType == typeof (string)) &&
	                                             (p.PropertyType.Namespace != null && !p.PropertyType.Namespace.Contains("BigBrother.Core")))
	                                 .ToList();
		
		dynamic attribute = bbEvent.GetCustomAttribute(typeof (EtwEventAttribute));
	    var attributeMessage = attribute.Message ?? EtwEventName(bbEvent);
#>
		[Event(
			<#=i#>,
			Task = Tasks.<#=EtwEventName(bbEvent)#>,
            Opcode = EventOpcode.<#=attribute.Opcode#>,
            Level = EventLevel.<#=attribute.Level#>,
            Channel = EventChannel.<#=attribute.Channel#>,
            Message = "<#=attributeMessage#>")]
		public void <#=EtwEventName(bbEvent)#>(<#=MapToSignature(validProperties, true)#>)
		{
			if (IsEnabled())
				WriteEvent(<#=i++#>, <#=MapToSignature(validProperties)#>);
		}

<#
    }
#>
    }

    /// <summary>
    /// <see cref="EventTask"/> Codes for the <see cref="EtwInternalSource"/> event source.
    /// </summary>
    public static partial class Tasks
    {
<#
    i = 0;
	foreach (var bbEvent in events)
	{
#>
        /// <summary>
        /// <#=EtwEventName(bbEvent)#> event.
        /// </summary>
        public const EventTask <#=EtwEventName(bbEvent)#> = (EventTask) (1 << <#=i++#>);

<#
    }
#>
	}
}
<#
    i = 1;
    manager.StartNewFile("EtwInternalExceptionSource.Generated.cs");
#>
namespace <#=Host.ResolveParameterValue("Etw", "Etw", "projectDefaultNamespace")#>
{
	using System;
    using Microsoft.Diagnostics.Tracing;

    [EventSource(Name = "<#=Host.ResolveParameterValue("Etw", "Etw", "projectDefaultNamespace")#>-Exceptions")]
    public sealed partial class EtwInternalExceptionSource : EventSource
    {
        private static readonly Lazy<EtwInternalExceptionSource> lazy = new Lazy<EtwInternalExceptionSource>(() => new EtwInternalExceptionSource());

        public static EtwInternalExceptionSource Instance { get { return lazy.Value; } }

<#  foreach (var bbEvent in exceptionEvents)
	{
	    var validProperties = bbEvent.GetProperties()
	                                 .Where(p => (p.PropertyType.IsValueType ||
	                                              p.PropertyType == typeof (Guid) ||
	                                              p.PropertyType == typeof (string)) &&
	                                             (p.PropertyType.Namespace != null && !p.PropertyType.Namespace.Contains("BigBrother.Core")))
	                                 .ToList();
#>
		[Event(
			<#=i#>,
			Task = Tasks.<#=EtwEventName(bbEvent)#>,
            Opcode = EventOpcode.Info,
            Level = EventLevel.Critical,
            Channel = EventChannel.Operational,
            Message = "Exception: {0}")]
		public void <#=EtwEventName(bbEvent)#>(<#=MapToSignature(validProperties, true)#>, string exMessage, string exStackTrace)
		{
			if (IsEnabled())
				WriteEvent(<#=i++#>, <#=MapToSignature(validProperties)#>, exMessage, exStackTrace);
		}

<#
    }
#>
    }

    /// <summary>
    /// <see cref="EventTask"/> Codes for the <see cref="EtwInternalExceptionSource"/> event source.
    /// </summary>
    public static partial class Tasks
    {
<#
    i = 0;
	foreach (var bbEvent in exceptionEvents)
	{
#>
        /// <summary>
        /// <#=EtwEventName(bbEvent)#> event.
        /// </summary>
        public const EventTask <#=EtwEventName(bbEvent)#> = (EventTask) (1 << <#=i++#>);

<#
    }
#>
	}
}
<#
    manager.StartNewFile("SetupBB.Generated.cs");
#>
namespace <#=Host.ResolveParameterValue("Etw", "Etw", "projectDefaultNamespace")#>
{
	using System;
	using System.Reactive.Linq;
	using BigBrother.Core;

    public partial class SetupBB : ISetupBB
    {
        public void Setup()
        {
<#  foreach (var bbEvent in events)
	{
	    var validProperties = bbEvent.GetProperties()
	                                 .Where(p => (p.PropertyType.IsValueType ||
	                                              p.PropertyType == typeof (Guid) ||
	                                              p.PropertyType == typeof (string)) &&
	                                             (p.PropertyType.Namespace != null && !p.PropertyType.Namespace.Contains("BigBrother.Core")))
	                                 .ToList();
#>
            BigBrother.EtwSubscriptions.Add(
                typeof (<#=bbEvent.Name#>),
                BigBrother.EventStream.OfType<<#=bbEvent.Name#>>().Subscribe(
                    e =>
                    {
                        EtwInternalSource.Instance.<#=EtwEventName(bbEvent)#>(<#=MapToEventSource(validProperties)#>);
                    }));

<#
    }

    foreach (var bbEvent in exceptionEvents)
	{
	    var validProperties = bbEvent.GetProperties()
	                                 .Where(p => (p.PropertyType.IsValueType ||
	                                              p.PropertyType == typeof (Guid) ||
	                                              p.PropertyType == typeof (string)) &&
	                                             (p.PropertyType.Namespace != null && !p.PropertyType.Namespace.Contains("BigBrother.Core")))
	                                 .ToList();
#>
            BigBrother.EtwSubscriptions.Add(
                typeof (<#=bbEvent.Name#>),
                BigBrother.EventStream.OfType<<#=bbEvent.Name#>>().Subscribe(
                    e =>
                    {
                        EtwInternalExceptionSource.Instance.<#=EtwEventName(bbEvent)#>(<#=MapToEventSource(validProperties)#>, e.Exception.Message, e.Exception.StackTrace);
                    }));

<#
    }
#>
        }
	}
}
<#
    manager.Process(true);
#>
<#+
    private static string CamelCase(string input)
    {
        return input[0].ToString().ToLower() + input.Substring(1);
    }

    private static string MapToSignature(List<PropertyInfo> properties, bool includeType = false)
    {
		var sb = new StringBuilder();
        foreach (var property in properties)
        {
            if (includeType)
                sb.Append(property.PropertyType.Name + " ");

            sb.Append(CamelCase(property.Name));

            if (property != properties.Last())
                sb.Append(", ");
        }

        return sb.ToString();
    }

    private static string MapToEventSource(List<PropertyInfo> properties)
    {
		var sb = new StringBuilder();
        foreach (var property in properties)
        {
            sb.Append("e." + property.Name);

            if (property != properties.Last())
                sb.Append(", ");
        }

        return sb.ToString();
    }

    private static string EtwEventName(Type eventType)
    {
        return eventType.Name.Replace("Event", "").Replace("event", "");
    }
#>