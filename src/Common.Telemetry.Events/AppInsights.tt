<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ include file="TemplateFileManager.ttinclude" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="$(ProjectDir)\bin\Debug\BigBrother.Core.dll" #>
<#@ assembly name="$(ProjectDir)\bin\Debug\$(TargetFileName)" #>
<#@ import namespace="BigBrother.Core" #>
<#@ output extension=".cs" #>
<#
	var manager = TemplateFileManager.Create(this);

    var assembly = AppDomain.CurrentDomain.GetAssemblies().First(a => a.ManifestModule.Name.Contains("Telemetry.Events.dll"));
    var events = assembly.GetTypes().Where(t => typeof (BBEvent).IsAssignableFrom(t) && !t.IsAbstract);

    foreach (var bbEvent in events)
    {
        manager.StartNewFile(bbEvent.Name + ".Generated.cs");
		var validProperties = bbEvent.GetProperties().Where(p => p.PropertyType.IsValueType || p.PropertyType == typeof (Guid) || p.PropertyType == typeof (string));
#>
namespace <#= bbEvent.Namespace #>
{
    using Microsoft.ApplicationInsights.Channel;
    using Microsoft.ApplicationInsights.DataContracts;

    public partial class <#= bbEvent.Name #>
    {
        public override ITelemetry ToTelemetry()
        {
            var eventTelementry = new EventTelemetry {Name = GetType().Name};

<#	foreach (var property in validProperties) {
		if(property.PropertyType == typeof(string))
		{
#>
            eventTelementry.Properties["<#= property.Name #>"] = <#= property.Name #>;
<#		} else { #>
            eventTelementry.Properties["<#= property.Name #>"] = <#= property.Name #>.ToString();
<#		}
	}
#>

            return eventTelementry;
        }
    }
}
<#
    }

    manager.Process();
#>

// Intentionally Empty

<#+

    private static byte[] GetAssembly(string assemblyPath)
    {
		byte[] data;

		using (var fs = File.OpenRead(assemblyPath))
		{
			data = new byte[fs.Length];
			fs.Read(data, 0, Convert.ToInt32(fs.Length));
		}

		if (data == null || data.Length == 0)
		{
			throw new ApplicationException("Failed to load " + assemblyPath);
		}

		return data;
    }
#>