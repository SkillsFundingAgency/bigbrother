<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ include file="TemplateFileManager.ttinclude" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="$(ProjectDir)\bin\Debug\BigBrother.Core.dll" #>
<#@ import namespace="BigBrother.Core" #>
<#@ output extension=".cs" #>
<#
	/***********************************************************/
	// This is the relative output directory for this project.
	// TODO: Get rid of this and make it smarter.
	/***********************************************************/

    const string relativeOutDir = @"\bin\Debug";

	var manager = TemplateFileManager.Create(this);
    var path = Path.Combine(Path.GetDirectoryName(Host.TemplateFile) + relativeOutDir, "Common.Telemetry.Events.dll");

    var assembly = Assembly.LoadFrom(path);
    var events = assembly.GetTypes().Where(t => typeof (BBEvent).IsAssignableFrom(t) && !t.IsAbstract);

    foreach (var bbEvent in events)
    {
        manager.StartNewFile(bbEvent.Name + ".Generated.cs");
		var validProperties = bbEvent.GetProperties().Where(p => p.PropertyType.IsValueType || p.PropertyType == typeof (Guid) || p.PropertyType == typeof (string));
#>
namespace <#= bbEvent.Namespace #>
{
    using Microsoft.ApplicationInsights.DataContracts;

    public partial class <#= bbEvent.Name #>
    {
        public EventTelemetry ToTelemetry()
        {
            var eventTelementry = new EventTelemetry {Name = GetType().Name};

<#	foreach (var property in validProperties) {
		if(property.PropertyType == typeof(string))
		{
#>
            eventTelementry.Properties["<#= property.Name #>"] = <#= property.Name #>;
<#		} else { #>
            eventTelementry.Properties["<#= property.Name #>"] = <#= property.Name #>.ToString();
<#		}
	}
#>

            return eventTelementry;
        }
    }
}
<#
    }

    manager.Process();
#>

// Intentionally Empty
